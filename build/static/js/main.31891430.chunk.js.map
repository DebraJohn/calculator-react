{"version":3,"sources":["components/event/index.js","components/screen/index.js","components/block/index.js","components/keyboard/index.js","components/calc/index.js","App.js","serviceWorker.js","index.js"],"names":["events__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","__webpack_exports__","EventEmitter","Screen","props","_this","Object","d_Debra_FILES_project_calculator_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","d_Debra_FILES_project_calculator_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","d_Debra_FILES_project_calculator_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","value","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","_this2","eventEmitter","Emitter","addListener","val","handleRecieved","removeListener","result","String","substr","length","eval","valFlag","_unused","_unused2","_unused3","setState","React","Component","Block","_this$props","shape","active","react_default","concat","onClick","handleValue","handleTouch","emit","Keyboard","leftItems","map","i","index","block_Block","key","rightItems","Calc","screen","keyboard_Keyboard","App","calc_Calc","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31891430.chunk.js","sourcesContent":["import { EventEmitter } from \"events\";\nexport default new EventEmitter();","import React from 'react';\nimport Emitter from '../event';\n\nimport './index.css';\n\nexport default class Screen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n  }\n  render() {\n    const { value } = this.state;\n    return (\n      <div className=\"screen\">\n        <span className=\"output\">{value}</span>\n      </div>\n    );\n  }\n  componentDidMount() {\n    this.eventEmitter = Emitter.addListener('sendValue', val => {\n      this.handleRecieved(val);\n    });\n  }\n  componentWillUnmount() {\n    Emitter.removeListener(this.eventEmitter);\n  }\n\n  handleRecieved(val) {\n    const { value } = this.state;\n    let result = '';\n    switch (val) {\n      case 'C':\n        break;\n      case 'DEL':\n        result = String(value).substr(0, String(value).length - 1);\n        break;\n      case '=':\n        try {\n          result = eval(value);\n          this.valFlag = true;\n        } catch {\n          this.valFlag = false;\n          return;\n        }\n        break;\n      case '/':\n      case '*':\n      case '-':\n      case '+':\n        this.valFlag = false;\n        try {\n          eval(value);\n        } catch {\n          return;\n        }\n        result = value + val;\n        break;\n      default:\n        if (val === '.') {\n          try {\n            eval(value + val);\n          } catch {\n            return;\n          }\n        }\n        if (this.valFlag) {\n          result = val;\n          this.valFlag = false;\n        } else {\n          result = value + val;\n        }\n        break;\n    }\n    this.setState({ value: result });\n  }\n}\n","import React from 'react';\nimport Emitter from '../event';\n\nexport default class Block extends React.Component {\n  render() {\n    const { value, shape, active } = this.props;\n    return (\n      <div\n        className={`block ${shape}${active ? ' active' : ''}`}\n        onClick={() => this.handleValue()}\n      >\n        {value}\n      </div>\n    );\n  }\n\n  handleTouch() {\n    this.setState({\n      active: true\n    });\n  }\n  handleValue() {\n    this.handleTouch();\n    let value = this.props.value;\n    Emitter.emit('sendValue', value);\n  }\n}\n","import React from 'react';\nimport Block from '../block';\nimport './index.css';\n\nexport default class Keyboard extends React.Component {\n  render() {\n    const leftBlock = [\n      'C',\n      'DEL',\n      '/',\n      '7',\n      '8',\n      '9',\n      '4',\n      '5',\n      '6',\n      '1',\n      '2',\n      '3',\n      '0',\n      '.'\n    ];\n    const rightBlock = ['*', '-', '+', '='];\n    const leftItems = leftBlock.map((i, index) => (\n      <Block key={index} value={i} shape={i === '0' ? 'rectangle' : 'square'} />\n    ));\n    const rightItems = rightBlock.map((i, index) => (\n      <Block key={index} value={i} shape={i === '=' ? 'rectangle' : 'square'} />\n    ));\n    return (\n      <div className=\"keyboard\">\n        <div className=\"left\">{leftItems}</div>\n        <div className=\"right\">{rightItems}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './index.css';\n\nimport Screen from '../screen';\nimport Keyboard from '../keyboard'\n\nexport default class Calc extends React.Component {\n  render() {\n    return (\n      <div className=\"calc\">\n        <Screen />\n        <Keyboard />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Calc from './components/calc';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calc />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}